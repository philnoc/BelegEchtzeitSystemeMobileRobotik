#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from rclpy.qos import qos_profile_sensor_data
from geometry_msgs.msg import Twist
from irobot_create_msgs.msg import HazardDetectionVector

class ForwardUntilHazard(Node):
    def __init__(self):
        super().__init__('forward_until_hazard')
        self.declare_parameter('cmd_vel_topic', '/cmd_vel')
        self.declare_parameter('hazard_topic', '/hazard_detection')
        self.declare_parameter('forward_speed', 0.15)   # m/s
        self.declare_parameter('backup_speed', -0.12)   # m/s
        self.declare_parameter('backup_time', 1.0)      # s

        self.pub = self.create_publisher(Twist, self.get_parameter('cmd_vel_topic').value, 10)
        self.sub = self.create_subscription(HazardDetectionVector,
                                            self.get_parameter('hazard_topic').value,
                                            self.hazard_cb,
                                            qos_profile_sensor_data)

        self.state = 'FORWARD'
        self.backup_elapsed = 0.0
        self.dt = 0.1
        self.timer = self.create_timer(self.dt, self.step)
        self.get_logger().info('Fahre vorwärts bis Hazard…')

    def hazard_cb(self, msg: HazardDetectionVector):
        if self.state == 'FORWARD' and msg.detections:
            self.get_logger().info('Hazard erkannt – starte Rückwärtsfahrt.')
            self.state = 'BACKUP'
            self.backup_elapsed = 0.0

    def step(self):
        cmd = Twist()
        if self.state == 'FORWARD':
            cmd.linear.x = float(self.get_parameter('forward_speed').value)
            self.pub.publish(cmd)
        elif self.state == 'BACKUP':
            self.backup_elapsed += self.dt
            if self.backup_elapsed <= float(self.get_parameter('backup_time').value):
                cmd.linear.x = float(self.get_parameter('backup_speed').value)
                self.pub.publish(cmd)
            else:
                self.pub.publish(Twist())
                self.get_logger().info('Rückwärts fertig. Stoppe.')
                rclpy.shutdown()

def main():
    rclpy.init()
    node = ForwardUntilHazard()
    rclpy.spin(node)

if __name__ == '__main__':
    main()
